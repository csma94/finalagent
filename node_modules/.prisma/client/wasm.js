
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  status: 'status',
  profile: 'profile',
  preferences: 'preferences',
  lastLoginAt: 'lastLoginAt',
  passwordChangedAt: 'passwordChangedAt',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  deviceTokens: 'deviceTokens',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  clientId: 'clientId'
};

exports.Prisma.AgentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  employeeId: 'employeeId',
  hireDate: 'hireDate',
  employmentStatus: 'employmentStatus',
  skills: 'skills',
  certifications: 'certifications',
  emergencyContact: 'emergencyContact',
  performanceMetrics: 'performanceMetrics',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  contactPerson: 'contactPerson',
  billingAddress: 'billingAddress',
  contractDetails: 'contractDetails',
  serviceLevel: 'serviceLevel',
  status: 'status',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SiteScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  name: 'name',
  address: 'address',
  coordinates: 'coordinates',
  geofenceRadius: 'geofenceRadius',
  geofenceCoordinates: 'geofenceCoordinates',
  qrCode: 'qrCode',
  siteType: 'siteType',
  accessInstructions: 'accessInstructions',
  emergencyContacts: 'emergencyContacts',
  equipmentList: 'equipmentList',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ShiftScalarFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  agentId: 'agentId',
  supervisorId: 'supervisorId',
  startTime: 'startTime',
  endTime: 'endTime',
  shiftType: 'shiftType',
  status: 'status',
  requirements: 'requirements',
  notes: 'notes',
  assignedAt: 'assignedAt',
  assignmentScore: 'assignmentScore',
  assignmentMethod: 'assignmentMethod',
  priority: 'priority',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  breakDuration: 'breakDuration'
};

exports.Prisma.ShiftAssignmentScalarFieldEnum = {
  id: 'id',
  shiftId: 'shiftId',
  agentId: 'agentId',
  assignmentScore: 'assignmentScore',
  assignmentMethod: 'assignmentMethod',
  assignmentReason: 'assignmentReason',
  constraints: 'constraints',
  assignedBy: 'assignedBy',
  assignedAt: 'assignedAt'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  shiftId: 'shiftId',
  agentId: 'agentId',
  clockInTime: 'clockInTime',
  clockOutTime: 'clockOutTime',
  clockInLocation: 'clockInLocation',
  clockOutLocation: 'clockOutLocation',
  clockInMethod: 'clockInMethod',
  clockOutMethod: 'clockOutMethod',
  qrCodeScanned: 'qrCodeScanned',
  totalHours: 'totalHours',
  overtimeHours: 'overtimeHours',
  breakDuration: 'breakDuration',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LocationTrackingScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  shiftId: 'shiftId',
  coordinates: 'coordinates',
  accuracy: 'accuracy',
  altitude: 'altitude',
  speed: 'speed',
  heading: 'heading',
  timestamp: 'timestamp',
  batteryLevel: 'batteryLevel',
  isMockLocation: 'isMockLocation',
  createdAt: 'createdAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  shiftId: 'shiftId',
  siteId: 'siteId',
  agentId: 'agentId',
  reportType: 'reportType',
  title: 'title',
  content: 'content',
  observations: 'observations',
  incidents: 'incidents',
  weatherConditions: 'weatherConditions',
  equipmentStatus: 'equipmentStatus',
  status: 'status',
  submittedAt: 'submittedAt',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  reviewerNotes: 'reviewerNotes',
  clientSignature: 'clientSignature',
  requiresFollowup: 'requiresFollowup',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.MediaFileScalarFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  filename: 'filename',
  originalFilename: 'originalFilename',
  filePath: 'filePath',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  fileHash: 'fileHash',
  mimeType: 'mimeType',
  fileType: 'fileType',
  category: 'category',
  description: 'description',
  isPublic: 'isPublic',
  tags: 'tags',
  metadata: 'metadata',
  thumbnails: 'thumbnails',
  location: 'location',
  timestamp: 'timestamp',
  uploadedBy: 'uploadedBy',
  shiftId: 'shiftId',
  status: 'status',
  isDuplicate: 'isDuplicate',
  originalFileId: 'originalFileId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  recipientId: 'recipientId',
  senderId: 'senderId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  channels: 'channels',
  status: 'status',
  scheduledAt: 'scheduledAt',
  sentAt: 'sentAt',
  readAt: 'readAt',
  createdAt: 'createdAt',
  isRead: 'isRead',
  expiresAt: 'expiresAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  recipientId: 'recipientId',
  message: 'message',
  messageType: 'messageType',
  mediaId: 'mediaId',
  priority: 'priority',
  status: 'status',
  readAt: 'readAt',
  createdAt: 'createdAt'
};

exports.Prisma.ClientRequestScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  siteId: 'siteId',
  requestType: 'requestType',
  title: 'title',
  description: 'description',
  priority: 'priority',
  status: 'status',
  contactPerson: 'contactPerson',
  preferredResponseTime: 'preferredResponseTime',
  assignedTo: 'assignedTo',
  resolutionNotes: 'resolutionNotes',
  resolvedAt: 'resolvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TimeOffRequestScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  startDate: 'startDate',
  endDate: 'endDate',
  type: 'type',
  reason: 'reason',
  status: 'status',
  isRecurring: 'isRecurring',
  recurrencePattern: 'recurrencePattern',
  requestedBy: 'requestedBy',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  rejectedReason: 'rejectedReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  reportType: 'reportType',
  fields: 'fields',
  isPublic: 'isPublic',
  isActive: 'isActive',
  clientId: 'clientId',
  siteId: 'siteId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportWorkflowScalarFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  action: 'action',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  tableName: 'tableName',
  recordId: 'recordId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp',
  entityType: 'entityType',
  entityId: 'entityId',
  details: 'details'
};

exports.Prisma.IncidentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  priority: 'priority',
  status: 'status',
  severity: 'severity',
  location: 'location',
  latitude: 'latitude',
  longitude: 'longitude',
  reportedBy: 'reportedBy',
  assignedTo: 'assignedTo',
  siteId: 'siteId',
  clientId: 'clientId',
  resolvedAt: 'resolvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  responseTime: 'responseTime'
};

exports.Prisma.IncidentUpdateScalarFieldEnum = {
  id: 'id',
  incidentId: 'incidentId',
  userId: 'userId',
  message: 'message',
  isInternal: 'isInternal',
  createdAt: 'createdAt'
};

exports.Prisma.IncidentAttachmentScalarFieldEnum = {
  id: 'id',
  incidentId: 'incidentId',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  uploadedBy: 'uploadedBy',
  createdAt: 'createdAt'
};

exports.Prisma.IncidentEscalationScalarFieldEnum = {
  id: 'id',
  incidentId: 'incidentId',
  fromUserId: 'fromUserId',
  toUserId: 'toUserId',
  reason: 'reason',
  status: 'status',
  escalatedAt: 'escalatedAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.CommunicationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  subject: 'subject',
  message: 'message',
  priority: 'priority',
  status: 'status',
  senderId: 'senderId',
  recipientId: 'recipientId',
  groupId: 'groupId',
  siteId: 'siteId',
  scheduledAt: 'scheduledAt',
  sentAt: 'sentAt',
  readAt: 'readAt',
  createdAt: 'createdAt'
};

exports.Prisma.CommunicationGroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommunicationGroupMemberScalarFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt'
};

exports.Prisma.CommunicationAttachmentScalarFieldEnum = {
  id: 'id',
  communicationId: 'communicationId',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  createdAt: 'createdAt'
};

exports.Prisma.QRCodeScalarFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  code: 'code',
  data: 'data',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  deactivatedAt: 'deactivatedAt'
};

exports.Prisma.QRCodeScanScalarFieldEnum = {
  id: 'id',
  qrCodeId: 'qrCodeId',
  agentId: 'agentId',
  scanLocation: 'scanLocation',
  locationValid: 'locationValid',
  distanceFromSite: 'distanceFromSite',
  success: 'success',
  scannedAt: 'scannedAt'
};

exports.Prisma.GeofenceViolationScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  siteId: 'siteId',
  shiftId: 'shiftId',
  violationType: 'violationType',
  distanceFromSite: 'distanceFromSite',
  currentLocation: 'currentLocation',
  firstViolationAt: 'firstViolationAt',
  lastViolationAt: 'lastViolationAt',
  resolvedAt: 'resolvedAt',
  resolvedBy: 'resolvedBy',
  resolutionNotes: 'resolutionNotes'
};

exports.Prisma.GeofenceValidationScalarFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  location: 'location',
  isWithinGeofence: 'isWithinGeofence',
  distanceFromCenter: 'distanceFromCenter',
  geofenceType: 'geofenceType',
  tolerance: 'tolerance',
  validatedAt: 'validatedAt'
};

exports.Prisma.SystemConfigurationScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  key: 'key',
  userId: 'userId',
  permissions: 'permissions',
  status: 'status',
  rateLimit: 'rateLimit',
  expiresAt: 'expiresAt',
  lastUsedAt: 'lastUsedAt',
  usageCount: 'usageCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  category: 'category',
  duration: 'duration',
  isRequired: 'isRequired',
  validityPeriod: 'validityPeriod',
  materials: 'materials',
  prerequisites: 'prerequisites',
  createdBy: 'createdBy',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingEnrollmentScalarFieldEnum = {
  id: 'id',
  trainingId: 'trainingId',
  agentId: 'agentId',
  enrolledBy: 'enrolledBy',
  status: 'status',
  enrolledAt: 'enrolledAt',
  dueDate: 'dueDate',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  progress: 'progress',
  notes: 'notes'
};

exports.Prisma.TrainingCompletionScalarFieldEnum = {
  id: 'id',
  trainingId: 'trainingId',
  agentId: 'agentId',
  score: 'score',
  passed: 'passed',
  completedAt: 'completedAt',
  expiresAt: 'expiresAt',
  certificateUrl: 'certificateUrl',
  notes: 'notes'
};

exports.Prisma.TrainingAssessmentScalarFieldEnum = {
  id: 'id',
  trainingId: 'trainingId',
  title: 'title',
  description: 'description',
  questions: 'questions',
  passingScore: 'passingScore',
  timeLimit: 'timeLimit',
  attempts: 'attempts',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssessmentAttemptScalarFieldEnum = {
  id: 'id',
  assessmentId: 'assessmentId',
  agentId: 'agentId',
  answers: 'answers',
  score: 'score',
  passed: 'passed',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  timeSpent: 'timeSpent'
};

exports.Prisma.CertificationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  issuingBody: 'issuingBody',
  type: 'type',
  validityPeriod: 'validityPeriod',
  requirements: 'requirements',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgentCertificationScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  certificationId: 'certificationId',
  obtainedAt: 'obtainedAt',
  expiresAt: 'expiresAt',
  certificateNumber: 'certificateNumber',
  certificateUrl: 'certificateUrl',
  status: 'status',
  notes: 'notes',
  verifiedBy: 'verifiedBy',
  verifiedAt: 'verifiedAt'
};

exports.Prisma.SkillAssessmentScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  skill: 'skill',
  level: 'level',
  assessedBy: 'assessedBy',
  assessedAt: 'assessedAt',
  score: 'score',
  notes: 'notes',
  validUntil: 'validUntil',
  status: 'status'
};

exports.Prisma.PerformanceReviewScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  reviewerId: 'reviewerId',
  period: 'period',
  type: 'type',
  overallScore: 'overallScore',
  goals: 'goals',
  achievements: 'achievements',
  improvements: 'improvements',
  feedback: 'feedback',
  status: 'status',
  scheduledAt: 'scheduledAt',
  conductedAt: 'conductedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttendanceRecordScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  date: 'date',
  clockIn: 'clockIn',
  clockOut: 'clockOut',
  breakStart: 'breakStart',
  breakEnd: 'breakEnd',
  totalHours: 'totalHours',
  overtimeHours: 'overtimeHours',
  status: 'status',
  notes: 'notes',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OnboardingTaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  order: 'order',
  isRequired: 'isRequired',
  estimatedDuration: 'estimatedDuration',
  instructions: 'instructions',
  resources: 'resources',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OnboardingCompletionScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  agentId: 'agentId',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  notes: 'notes',
  verifiedBy: 'verifiedBy',
  verifiedAt: 'verifiedAt'
};

exports.Prisma.GeofenceEventScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  siteId: 'siteId',
  eventType: 'eventType',
  timestamp: 'timestamp',
  details: 'details',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  zoneId: 'zoneId',
  latitude: 'latitude',
  longitude: 'longitude',
  metadata: 'metadata'
};

exports.Prisma.GeofenceZoneScalarFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  name: 'name',
  coordinates: 'coordinates',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GeofenceRuleScalarFieldEnum = {
  id: 'id',
  zoneId: 'zoneId',
  ruleType: 'ruleType',
  conditions: 'conditions',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  trigger: 'trigger',
  siteId: 'siteId',
  actions: 'actions'
};

exports.Prisma.NotificationDeliveryScalarFieldEnum = {
  id: 'id',
  notificationId: 'notificationId',
  recipientId: 'recipientId',
  channel: 'channel',
  status: 'status',
  deliveredAt: 'deliveredAt',
  attemptedAt: 'attemptedAt',
  error: 'error',
  createdAt: 'createdAt'
};

exports.Prisma.CheckInScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  siteId: 'siteId',
  time: 'time',
  location: 'location',
  createdAt: 'createdAt',
  checkpointId: 'checkpointId',
  latitude: 'latitude',
  longitude: 'longitude'
};

exports.Prisma.HealthCheckScalarFieldEnum = {
  id: 'id',
  service: 'service',
  status: 'status',
  checkedAt: 'checkedAt'
};

exports.Prisma.IntegrationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  config: 'config',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  webhookUrl: 'webhookUrl',
  apiKey: 'apiKey'
};

exports.Prisma.LocationUpdateScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  siteId: 'siteId',
  latitude: 'latitude',
  longitude: 'longitude',
  accuracy: 'accuracy',
  speed: 'speed',
  heading: 'heading',
  timestamp: 'timestamp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  emailNotifications: 'emailNotifications',
  smsNotifications: 'smsNotifications',
  pushNotifications: 'pushNotifications',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientFeedbackScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.PatrolScalarFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  agentId: 'agentId',
  status: 'status',
  startedAt: 'startedAt',
  endedAt: 'endedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  totalAmount: 'totalAmount',
  status: 'status',
  issuedAt: 'issuedAt',
  dueAt: 'dueAt'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  amount: 'amount',
  category: 'category',
  createdAt: 'createdAt'
};

exports.Prisma.EmergencyContactScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  phone: 'phone',
  relation: 'relation'
};

exports.Prisma.EmergencyProcedureScalarFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  name: 'name',
  steps: 'steps'
};

exports.Prisma.EmergencyAlertScalarFieldEnum = {
  id: 'id',
  siteId: 'siteId',
  agentId: 'agentId',
  type: 'type',
  message: 'message',
  createdAt: 'createdAt'
};

exports.Prisma.EmergencyResponseScalarFieldEnum = {
  id: 'id',
  alertId: 'alertId',
  responderId: 'responderId',
  response: 'response',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  SUPERVISOR: 'SUPERVISOR',
  AGENT: 'AGENT',
  CLIENT: 'CLIENT'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  PENDING: 'PENDING'
};

exports.AgentStatus = exports.$Enums.AgentStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ON_LEAVE: 'ON_LEAVE',
  TERMINATED: 'TERMINATED'
};

exports.ClientStatus = exports.$Enums.ClientStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED'
};

exports.SiteStatus = exports.$Enums.SiteStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  MAINTENANCE: 'MAINTENANCE',
  CLOSED: 'CLOSED'
};

exports.ShiftType = exports.$Enums.ShiftType = {
  REGULAR: 'REGULAR',
  OVERTIME: 'OVERTIME',
  EMERGENCY: 'EMERGENCY',
  TRAINING: 'TRAINING'
};

exports.ShiftStatus = exports.$Enums.ShiftStatus = {
  SCHEDULED: 'SCHEDULED',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

exports.AssignmentMethod = exports.$Enums.AssignmentMethod = {
  MANUAL: 'MANUAL',
  AUTO: 'AUTO',
  INTELLIGENT_AUTO: 'INTELLIGENT_AUTO',
  EMERGENCY_AUTO: 'EMERGENCY_AUTO'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT',
  CRITICAL: 'CRITICAL'
};

exports.AttendanceMethod = exports.$Enums.AttendanceMethod = {
  GPS: 'GPS',
  QR_CODE: 'QR_CODE',
  MANUAL: 'MANUAL',
  NFC: 'NFC'
};

exports.AttendanceStatus = exports.$Enums.AttendanceStatus = {
  CLOCKED_IN: 'CLOCKED_IN',
  ON_BREAK: 'ON_BREAK',
  CLOCKED_OUT: 'CLOCKED_OUT',
  INCOMPLETE: 'INCOMPLETE'
};

exports.ReportType = exports.$Enums.ReportType = {
  PATROL: 'PATROL',
  INCIDENT: 'INCIDENT',
  INSPECTION: 'INSPECTION',
  MAINTENANCE: 'MAINTENANCE',
  EMERGENCY: 'EMERGENCY'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  ARCHIVED: 'ARCHIVED'
};

exports.ReportPriority = exports.$Enums.ReportPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.MediaType = exports.$Enums.MediaType = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  DOCUMENT: 'DOCUMENT'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  MAINTENANCE: 'MAINTENANCE',
  TRAINING: 'TRAINING',
  SYSTEM: 'SYSTEM',
  SECURITY: 'SECURITY',
  INCIDENT: 'INCIDENT',
  SHIFT: 'SHIFT',
  BILLING: 'BILLING',
  INFO: 'INFO',
  WARNING: 'WARNING',
  URGENT: 'URGENT',
  EMERGENCY: 'EMERGENCY'
};

exports.NotificationStatus = exports.$Enums.NotificationStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  FAILED: 'FAILED',
  READ: 'READ'
};

exports.NotificationChannel = exports.$Enums.NotificationChannel = {
  PUSH: 'PUSH',
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  IN_APP: 'IN_APP'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  LOCATION: 'LOCATION',
  FILE: 'FILE'
};

exports.MessagePriority = exports.$Enums.MessagePriority = {
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.MessageStatus = exports.$Enums.MessageStatus = {
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ',
  FAILED: 'FAILED'
};

exports.RequestType = exports.$Enums.RequestType = {
  ADDITIONAL_PATROL: 'ADDITIONAL_PATROL',
  EMERGENCY_RESPONSE: 'EMERGENCY_RESPONSE',
  MAINTENANCE: 'MAINTENANCE',
  CONSULTATION: 'CONSULTATION',
  OTHER: 'OTHER'
};

exports.RequestPriority = exports.$Enums.RequestPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  OPEN: 'OPEN',
  ASSIGNED: 'ASSIGNED',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED',
  CANCELLED: 'CANCELLED'
};

exports.TimeOffType = exports.$Enums.TimeOffType = {
  VACATION: 'VACATION',
  SICK: 'SICK',
  PERSONAL: 'PERSONAL',
  EMERGENCY: 'EMERGENCY',
  BEREAVEMENT: 'BEREAVEMENT',
  JURY_DUTY: 'JURY_DUTY',
  MILITARY: 'MILITARY',
  OTHER: 'OTHER'
};

exports.TimeOffStatus = exports.$Enums.TimeOffStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

exports.IncidentType = exports.$Enums.IncidentType = {
  SECURITY_BREACH: 'SECURITY_BREACH',
  THEFT: 'THEFT',
  VANDALISM: 'VANDALISM',
  MEDICAL_EMERGENCY: 'MEDICAL_EMERGENCY',
  FIRE: 'FIRE',
  NATURAL_DISASTER: 'NATURAL_DISASTER',
  EQUIPMENT_FAILURE: 'EQUIPMENT_FAILURE',
  UNAUTHORIZED_ACCESS: 'UNAUTHORIZED_ACCESS',
  SUSPICIOUS_ACTIVITY: 'SUSPICIOUS_ACTIVITY',
  SAFETY_VIOLATION: 'SAFETY_VIOLATION',
  OTHER: 'OTHER'
};

exports.IncidentPriority = exports.$Enums.IncidentPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL',
  EMERGENCY: 'EMERGENCY'
};

exports.IncidentStatus = exports.$Enums.IncidentStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  PENDING_REVIEW: 'PENDING_REVIEW',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED',
  CANCELLED: 'CANCELLED'
};

exports.IncidentSeverity = exports.$Enums.IncidentSeverity = {
  MINOR: 'MINOR',
  MODERATE: 'MODERATE',
  MAJOR: 'MAJOR',
  CRITICAL: 'CRITICAL'
};

exports.EscalationStatus = exports.$Enums.EscalationStatus = {
  PENDING: 'PENDING',
  ACKNOWLEDGED: 'ACKNOWLEDGED',
  RESOLVED: 'RESOLVED',
  CANCELLED: 'CANCELLED'
};

exports.CommunicationType = exports.$Enums.CommunicationType = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  PUSH_NOTIFICATION: 'PUSH_NOTIFICATION',
  INTERNAL_MESSAGE: 'INTERNAL_MESSAGE',
  BROADCAST: 'BROADCAST',
  EMERGENCY_ALERT: 'EMERGENCY_ALERT'
};

exports.CommunicationPriority = exports.$Enums.CommunicationPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT',
  EMERGENCY: 'EMERGENCY'
};

exports.CommunicationStatus = exports.$Enums.CommunicationStatus = {
  DRAFT: 'DRAFT',
  SCHEDULED: 'SCHEDULED',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ',
  FAILED: 'FAILED'
};

exports.GroupMemberRole = exports.$Enums.GroupMemberRole = {
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  MEMBER: 'MEMBER'
};

exports.TrainingType = exports.$Enums.TrainingType = {
  ORIENTATION: 'ORIENTATION',
  SAFETY: 'SAFETY',
  TECHNICAL: 'TECHNICAL',
  COMPLIANCE: 'COMPLIANCE',
  SOFT_SKILLS: 'SOFT_SKILLS',
  CERTIFICATION_PREP: 'CERTIFICATION_PREP',
  REFRESHER: 'REFRESHER',
  SPECIALIZED: 'SPECIALIZED'
};

exports.EnrollmentStatus = exports.$Enums.EnrollmentStatus = {
  ENROLLED: 'ENROLLED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

exports.CertificationType = exports.$Enums.CertificationType = {
  SECURITY_LICENSE: 'SECURITY_LICENSE',
  FIRST_AID: 'FIRST_AID',
  CPR: 'CPR',
  FIRE_SAFETY: 'FIRE_SAFETY',
  TECHNICAL: 'TECHNICAL',
  PROFESSIONAL: 'PROFESSIONAL',
  REGULATORY: 'REGULATORY',
  INTERNAL: 'INTERNAL'
};

exports.CertificationStatus = exports.$Enums.CertificationStatus = {
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  SUSPENDED: 'SUSPENDED',
  REVOKED: 'REVOKED',
  PENDING_RENEWAL: 'PENDING_RENEWAL'
};

exports.SkillLevel = exports.$Enums.SkillLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED',
  EXPERT: 'EXPERT'
};

exports.AssessmentStatus = exports.$Enums.AssessmentStatus = {
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  PENDING_REVIEW: 'PENDING_REVIEW',
  INVALID: 'INVALID'
};

exports.ReviewType = exports.$Enums.ReviewType = {
  QUARTERLY: 'QUARTERLY',
  ANNUAL: 'ANNUAL',
  PROBATIONARY: 'PROBATIONARY',
  SPECIAL: 'SPECIAL',
  EXIT: 'EXIT'
};

exports.ReviewStatus = exports.$Enums.ReviewStatus = {
  DRAFT: 'DRAFT',
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.WorkforceAttendanceStatus = exports.$Enums.WorkforceAttendanceStatus = {
  PRESENT: 'PRESENT',
  ABSENT: 'ABSENT',
  LATE: 'LATE',
  EARLY_DEPARTURE: 'EARLY_DEPARTURE',
  SICK_LEAVE: 'SICK_LEAVE',
  VACATION: 'VACATION',
  PERSONAL_LEAVE: 'PERSONAL_LEAVE',
  UNPAID_LEAVE: 'UNPAID_LEAVE',
  HOLIDAY: 'HOLIDAY'
};

exports.CompletionStatus = exports.$Enums.CompletionStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  SKIPPED: 'SKIPPED',
  FAILED: 'FAILED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Agent: 'Agent',
  Client: 'Client',
  Site: 'Site',
  Shift: 'Shift',
  ShiftAssignment: 'ShiftAssignment',
  Attendance: 'Attendance',
  LocationTracking: 'LocationTracking',
  Report: 'Report',
  MediaFile: 'MediaFile',
  Notification: 'Notification',
  Message: 'Message',
  ClientRequest: 'ClientRequest',
  TimeOffRequest: 'TimeOffRequest',
  ReportTemplate: 'ReportTemplate',
  ReportWorkflow: 'ReportWorkflow',
  AuditLog: 'AuditLog',
  Incident: 'Incident',
  IncidentUpdate: 'IncidentUpdate',
  IncidentAttachment: 'IncidentAttachment',
  IncidentEscalation: 'IncidentEscalation',
  Communication: 'Communication',
  CommunicationGroup: 'CommunicationGroup',
  CommunicationGroupMember: 'CommunicationGroupMember',
  CommunicationAttachment: 'CommunicationAttachment',
  QRCode: 'QRCode',
  QRCodeScan: 'QRCodeScan',
  GeofenceViolation: 'GeofenceViolation',
  GeofenceValidation: 'GeofenceValidation',
  SystemConfiguration: 'SystemConfiguration',
  ApiKey: 'ApiKey',
  Training: 'Training',
  TrainingEnrollment: 'TrainingEnrollment',
  TrainingCompletion: 'TrainingCompletion',
  TrainingAssessment: 'TrainingAssessment',
  AssessmentAttempt: 'AssessmentAttempt',
  Certification: 'Certification',
  AgentCertification: 'AgentCertification',
  SkillAssessment: 'SkillAssessment',
  PerformanceReview: 'PerformanceReview',
  AttendanceRecord: 'AttendanceRecord',
  OnboardingTask: 'OnboardingTask',
  OnboardingCompletion: 'OnboardingCompletion',
  GeofenceEvent: 'GeofenceEvent',
  GeofenceZone: 'GeofenceZone',
  GeofenceRule: 'GeofenceRule',
  NotificationDelivery: 'NotificationDelivery',
  CheckIn: 'CheckIn',
  HealthCheck: 'HealthCheck',
  Integration: 'Integration',
  LocationUpdate: 'LocationUpdate',
  NotificationSettings: 'NotificationSettings',
  ClientFeedback: 'ClientFeedback',
  Patrol: 'Patrol',
  Invoice: 'Invoice',
  Expense: 'Expense',
  EmergencyContact: 'EmergencyContact',
  EmergencyProcedure: 'EmergencyProcedure',
  EmergencyAlert: 'EmergencyAlert',
  EmergencyResponse: 'EmergencyResponse'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
